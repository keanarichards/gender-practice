{"frames":[{"func":"grid_search(regression_sim, params = list(n = c(3000, 3250, 3500), \n    b3 = c(0.2, 0.3, 0.4)), n.iter = 5000, output = \"data.frame\", \n    parallel = \"snow\", ncpus = 3, b0 = 0, b1 = 0.2, b2 = 0.2)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"run_test(func = func, params = grid, n.iter = n.iter, output = output, \n    boot = boot, bootParams = bootParams, parallel = parallel, \n    ncpus = ncpus, cl = cl, beep = beep, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"system.time(for (set in 1:nSets) {\n    if (nrow(prms) == 0 && length(dots) == 0) {\n        if (boot && \"data\" %in% names(bootParams)) {\n            boot_output <- do.call(boot::boot, args = c(list(statistic = func,  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"do.call(parallel::parLapply, args = c(list(cl = clust, X = 1:n.iter, \n    fun = func), opts))","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (cl = NULL, X, fun, ..., chunk.size = NULL) \n{\n    cl <- defaultCluster(cl)\n    nchunks <- staticNChunks(length(X), length(cl), chunk.size) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"do.call(c, clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, \n    FUN = fun, ...), quote = TRUE)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"clusterApply(cl = cl, x = splitList(X, nchunks), fun = lapply, \n    FUN = fun, ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"staticClusterApply(cl, fun, length(x), argfun)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"lapply(cl[1:jobs], recvResult)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"FUN(X[[i]], ...)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recvData(con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"recvData.SOCKnode(con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"unserialize(node$con)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (value) \n{\n    if (from_save(sys.calls())) \n        return(NULL) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(msg)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error: [conflicted] \u001B[34m`filter`\u001B[39m found in 2 packages.\nEither pick the one you want with `::` \n* \u001B[34mdplyr::filter\u001B[39m\n* \u001B[34mstats::filter\u001B[39m\nOr declare a preference with `conflict_prefer()`\n* conflict_prefer(\"filter\", \"dplyr\")\n* conflict_prefer(\"filter\", \"stats\")\nBacktrace:\n"}