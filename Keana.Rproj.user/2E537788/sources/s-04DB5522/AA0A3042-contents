---
title: "R Notebook"
output:
  html_document:
    df_print: paged
editor_options:
  chunk_output_type: inline
---

```{r}
library(plyr)
library(dplyr)
library(ggplot2)
library(paramtest)
library(umap)
conflict_prefer("here", "here")

## http://disjointedthinking.jeffhughes.ca/2017/09/power-simulations-r/
```

# Function for multiple regression study 1

```{r}

regression_sim <- function(simNum, n, b0, b1, b2, b3, x1_mean = 0, x1_sd = 1, err_mean = 0, err_sd = 1) {
  x1 <- sample(0:1, n, replace = T)
  x2 <- sample(0:1, n, replace = T)
  
  y <- b0 + (b1*x1) + (b2*x2) + (b3*x1*x2) + rnorm(n, mean = 0, sd = 1)
model <- lm(y~ x1*x2)

  
  output <- summary(model)$coefficients
coefs <- output[,1]
ps <- output[,4]

rsq <- summary(model)$r.squared

results <- c(coefs, ps, rsq)
names(results) <- c('b0_coef', 'b1_coef', 'b2_coef', 'b3_coef', 'b0_p', 'b1_p', 'b2_p', 'b3_p', 'rsq')

  return(results)
  
}

```

# study 2
```{r}
regression_sim2 <- function(simNum, n, b0, b1, b2, b3, b4, b5, x1_mean = 0, x1_sd = 1, err_mean = 0, err_sd = 1) {
  #changed x2 into variable with three conditions
  x1 <- sample(0:1, n, replace = T)
  x2 <- sample(0:2, n, replace = T)
  
  ##dummy code into x2 and x3
  x3 <- ifelse(x2 == 2, 1, 0)
  x2 <- ifelse(x2 == 1, 1, 0)
  
  ##model should have five terms total
  y <- b0 + (b1*x1) + (b2*x2) + (b3*x3) + (b4*x1*x2) + (b5*x1*x3) + rnorm(n, mean = 0, sd = 1)
  
  ##you may need to think about comparing the simpler model to the more complex model
  ##some may think you can't test the individual coefficients unless the interaction model fits better
  model1 <- lm(y~x1+x2+x3)
  model2 <- lm(y~ x1*x2+x1*x3)

  ##get pvalue for f-test comparing models
  f_p <- anova(model1, model2)[2,6]
  
  output <- summary(model2)$coefficients
coefs <- output[,1]
ps <- output[,4]

rsq1 <- summary(model1)$r.squared
rsq2 <- summary(model2)$r.squared

results <- c(coefs, ps, rsq1, rsq2, f_p)
names(results) <- c('b0_coef', 'b1_coef', 'b2_coef', 'b3_coef', 'b4_coef', 'b5_coef',
                    'b0_p', 'b1_p', 'b2_p', 'b3_p', 'b4_p', 'b5_p', 'rsq1', 'rsq2',
                    'f_p')

  return(results)
  
}

```





# Using paramtest to vary sample size & beta 

```{r}

##edited to get power for f-test
paramtest_results <- grid_search(regression_sim2,
    params=list(n=c(1000, 2000), b5=c(.2, .3, .4)),
    n.iter=500, output='data.frame', parallel='snow', ncpus=3,
    b0=0, b1=.2, b2=.2, b3 = .2, b4 = .2)

power <- results(paramtest_results) %>%
    dplyr::group_by(n.test, b5.test) %>%
    dplyr::summarise(power_b5 = sum(b5_p < .05)/n(),
                     power_f = sum(f_p < .05)/n())
print(power)




```


```{r}

p <- ggplot(power, aes(x=n.test, y=power, group=factor(b3.test), colour=factor(b3.test))) +
    geom_point() +
    geom_line() +
  geom_hline(yintercept = .80, linetype = "dashed") +
  scale_y_continuous(limits = c(0,1), breaks = seq(0, 1, by = .2))+ 
  scale_x_continuous(limits = c(2800,4000), breaks = seq(2800, 4000, by = 400))+
      labs(x='Sample Size', y='Power', colour="Beta estimate for interaction") +
    theme_minimal() +theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) 


## cut label:  geom_label(label = ".801", x = 3000, y = .85,  label.padding = unit(0.55, "lines"), # Rectangle size around label
   # label.size = 0.35,
  #  color = "black")
ggsave(here("nsf-application","nsf_insertimage_1.png"), p, width = 7, height = 7)

```

