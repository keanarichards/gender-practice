---
title: "COVID19 Narrative messages"
date: "`r Sys.Date()`"
output:
  github_document:
    toc: true
    toc_depth: 2
always_allow_html: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

# load packages
```{r}
# Package names"
packages <- c("psych", "tidyverse", "knitr", "qualtRics", "nFactors", "matrixStats")

# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(packages[!installed_packages])
}

# Packages loading
invisible(lapply(packages, library, character.only = TRUE))

```

# load data

```{r}

setwd("C:/Users/keana/OneDrive - PennO365/Comp_transfer2018/Penn/third_yr/cnl/CNL")
import <- read_survey("full_pilot.csv")
#Complete pilot 1 data file
#import <- read_survey("~/Box Sync/CurrentProjects_Penn/COVID-19/Analysis/Narratives/Narratives_Pilot1/COVID-19 Narratives 1_April 10, 2020_10.09.csv")
```

# removing unnecessary variables


```{r}
raw <- import #BM: Added so that we don't have to reload the data every time there's a bug in programming
## timer questions
col_names <- names(raw)
r<- grepl("time|RT|Click|Page" , col_names)
raw <- raw[!r]

# BM: I commented out this code because it was removing data from the first 10 subjects from the initial wave.
# ## removing people who helped test (any completed before 4/9) 
# test = grepl("^2020-04-06 |^2020-04-07 |^2020-04-08", as.character(raw$StartDate))
# raw= raw[!test, ]

## removing qualtrics output
raw <- raw %>% dplyr::select(-StartDate:-UserLanguage)
```


# Remove participants if they:
    * are under 18
    * are not currently residing in the US
    * english check 
    * fail attention check 
    * have response invariance (defined as the - 3 sd from total median variance across scales)
    * came from survey testing and preview mode

```{r}
### must be MTurk workers
MID <- is.na(raw$MID)
raw <- raw[!MID,]

### above 18; currently reside in US; attention check 2
raw <- raw %>% filter(screen_1 ==1 & screen_2 == 1 & attention_2 == 5) 
excluded <- raw %>% filter(screen_1 !=1 & screen_2 != 1 & attention_2 != 5) 

### english check
print("summary of responses prior to exclusions") #BM: Consider keeping people whose responses indicate why it was going slow?
raw$english_check

# variables containing exclusions
copy <- raw[which(raw$english_check=="The delivery truck zoomed by the school bus because it was going so slow."),]
e <- raw[!grepl("bus|truck", raw$english_check,ignore.case = T),]

# removing bad subjects
raw <- raw[-which(raw$english_check=="The delivery truck zoomed by the school bus because it was going so slow."),]
raw <- raw[grepl("bus|truck", raw$english_check,ignore.case = T),]

print("summary of final responses after exclusions")
raw$english_check


### dropping unnecessary variables
excluded <- rbind (excluded, e, copy, MID)
raw <- raw %>% dplyr::select(-screen_1:-english_check)

```

Inspect open-ended feedback
```{r}
print("summary of open-ended feedback after exclusions")
raw$fb_open
```

Invariance 

```{r}
# first have to rename cols

varying <- names(raw %>% dplyr::select('1_nh_share_1':'5_ej_empathy_12'))
names <- paste0(substr(varying, 3, nchar(varying)), "_", substr(varying, 0,1))
raw <- raw %>% rename_at(vars(varying), ~ names)


names <- names(raw)

sd<- rowSds(as.matrix(raw[grep("^stress_(.*)_([0-9])", names(raw))], na.rm = T))
sd= data.frame(sd)
                              
sd= sd %>% mutate(sd1=rowSds(as.matrix(raw[grep("^(.)(.)_share_([0-9]|1[0-2])_(.)", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd2=rowSds(as.matrix(raw[grep("^(.)(.)_empathy_([0-9]|1[0-2])_(.)", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd3=rowSds(as.matrix(raw[grep("c_msg", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd4=rowSds(as.matrix(raw[grep("prosocial_motivation", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd5=rowSds(as.matrix(raw[grep("belief_self|belief_others", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd6=rowSds(as.matrix(raw[grep("belief_vulnerable", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd7=rowSds(as.matrix(raw[grep("selfconstrual", names(raw))]), na.rm = T))
sd= sd %>% mutate(sd8=rowSds(as.matrix(raw[grep("policy", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd9=rowSds(as.matrix(raw[grep("humanization", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd10=rowSds(as.matrix(raw[grep("prejudice", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd11=rowSds(as.matrix(raw[grep("pss_(.)", names(raw))]), na.rm = T))
sd= sd %>% mutate(sd12=rowSds(as.matrix(raw[grep("lonely", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd13=rowSds(as.matrix(raw[grep("^empathy_group_(.)", names(raw))]), na.rm = T))

#BM: Keana, I combined the two lines that were commented out because they're actually the same scale.
sd= sd %>% mutate(sd14=rowSds(as.matrix(raw[grep("^empathy_(.)$|^iri_empathy", names(raw))]), na.rm = T))
# sd= sd %>% mutate(sd14=rowSds(as.matrix(raw[grep("^empathy_(.)$", names(raw))]), na.rm = T))
# sd= sd %>% mutate(sd15=rowSds(as.matrix(raw[grep("^iri_empathy", names(raw))]), na.rm = T))

sd= sd %>% mutate(sd16=rowSds(as.matrix(raw[grep("victimhood", names(raw))]), na.rm = T))

# usefulness: sd= sd %>% mutate(sd17=rowSds(as.matrix(raw[grep("usefulness", names(raw))]), na.rm = T))

# purpose: sd= sd %>% mutate(sd18=rowSds(as.matrix(raw[grep("usefulness", names(raw))]), na.rm = T))

sd= sd %>% mutate(sum = rowSums(., na.rm = T))
cutoff =median(sd$sum) - 3*sd(sd$sum)
raw = raw %>% filter(sd$sum > cutoff)

```

    
# Create Participant ID = ID 

```{r}
raw <- raw %>% mutate(ID = seq(1, nrow(raw)))
```


# creating composites for message-specific items
state empathy DV (no reverse scored)
sharing
relevance
motivation

```{r}
## selecting empathy columns 1-4

affective <- names(raw[grep("^(.)(.)_empathy_([1-4])_(.)", names(raw))])

## creating empathy composite
raw <-raw %>% mutate(aff_empathy = rowMeans(raw[affective], na.rm = T))

## selecting empathy columns 5-8

cognitive <- names(raw[grep("^(.)(.)_empathy_([5-8])_(.)", names(raw))])

## creating empathy composite
raw <-raw %>% mutate(cog_empathy = rowMeans(raw[cognitive], na.rm = T))

## selecting empathy columns 9-12

associative <- names(raw[grep("^(.)(.)_empathy_([9]|1[0-2])_(.)", names(raw))])
## creating empathy composite
raw <-raw %>% mutate(as_empathy = rowMeans(raw[associative], na.rm = T))

## selecting empathy columns (all)

full <- names(raw[grep("^(.)(.)_empathy_([0-9]|1[0-2])_(.)", names(raw))])
## creating empathy composite
raw <-raw %>% mutate(state_empathy = rowMeans(raw[full], na.rm = T))

## Sharing intentions for social  = share_sm
full <- names(raw[grep("^(.)(.)_share_1_(.)", names(raw))])
## creating composite across 5 messages 
raw <-raw %>% mutate(share_sm = rowMeans(raw[full], na.rm = T))

## Sharing intentions for unconcerned = share_uncon
full <- names(raw[grep("^(.)(.)_share_2_(.)", names(raw))])
## creating composite across 5 messages 
raw <-raw %>% mutate(share_uncon = rowMeans(raw[full], na.rm = T))

## Sharing intentions for concerned = share_con
full <- names(raw[grep("^(.)(.)_share_3_(.)", names(raw))])
## creating composite across 5 messages 
raw <-raw %>% mutate(share_con = rowMeans(raw[full], na.rm = T))

## Relevance self = rel_self
full <- names(raw[grep("^c_msg_rel_self_(.)|^5_c_msg_rel_self(.)", names(raw))])
## creating composite across 5 messages 
raw <-raw %>% mutate(rel_self = rowMeans(raw[full], na.rm = T))

## Relevance others = rel_social
full <- names(raw[grep("^c_msg_rel_social_(.)|^5_c_msg_rel_social(.)", names(raw))])
## creating composite across 5 messages 
raw <-raw %>% mutate(rel_social = rowMeans(raw[full], na.rm = T))

## Self motivation avoid others = motiv_self
full <- names(raw[grep("^c_msg_motiv_self_(.)|^5_c_msg_motiv_self(.)", names(raw))])
## creating composite across 5 messages 
raw <-raw %>% mutate(motiv_self = rowMeans(raw[full], na.rm = T))

## Other motivation avoid others = motiv_other
full <- names(raw[grep("^c_msg_motiv_other_(.)|^5_c_msg_motiv_other(.)", names(raw))])
## creating composite across 5 messages 
raw <-raw %>% mutate(motiv_other = rowMeans(raw[full], na.rm = T))

```

# Factor Analysis of All Policy Items

```{r}
# Determine Number of Factors to Extract: https://www.statmethods.net/advstats/factor.html
# policies entered in the same order as listed in Qualtrics
policydata <- as.data.frame(cbind(raw$policy_1,
                    raw$policy_2,
                    raw$policy_3,
                    raw$policy_4,
                    raw$policy_5,
                    raw$policy_6,
                    raw$policy_7,
                    raw$policy1_33,
                    raw$policy1_34,
                    raw$policy_8,
                    raw$policy_9,
                    raw$policy_10,
                    raw$policy_12,
                    raw$policy_13,
                    raw$policy_14,
                    raw$policy_15,
                    raw$policy_16,
                    raw$policy2_9,
                    raw$policy2_10,
                    raw$policy2_11,
                    raw$policy2_12,
                    raw$policy2_13
                    ))
ev <- eigen(cor(policydata)) # get eigenvalues
ap <- parallel(subject=nrow(policydata),var=ncol(policydata),
  rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS) # looks like the answer is 3 factors

# Run Exploratory Maximum Likelihood Factor Analysis
# with varimax rotation
fit <- factanal(policydata, 3, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
# load <- fit$loadings[,1:2]
# plot(load,type="n") # set up plot
# text(load,labels=names(policydata)) # add variable names

```

# Factor Analysis of Policy Items Directed at the Most Vulnerable

```{r}
# Determine Number of Factors to Extract: https://www.statmethods.net/advstats/factor.html
# policies entered in the same order as listed in Qualtrics
policydata <- as.data.frame(cbind(raw$policy_1,
                    raw$policy_2,
                    raw$policy_3,
                    raw$policy_4,
                    raw$policy_5,
                    raw$policy_6,
                    raw$policy_7,
                    raw$policy1_33,
                    raw$policy1_34
                    ))
ev <- eigen(cor(policydata)) # get eigenvalues
ap <- parallel(subject=nrow(policydata),var=ncol(policydata),
  rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS) # looks like the answer is just a single factor

# Run Exploratory Maximum Likelihood Factor Analysis
# with varimax rotation
fit <- factanal(policydata, 1, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
# load <- fit$loadings[,1:2]
# plot(load,type="n") # set up plot
# text(load,labels=names(policydata)) # add variable names

```

# Factor Analysis of Policy Items Directed at Low-Vulnerability Targets

```{r}
# Determine Number of Factors to Extract: https://www.statmethods.net/advstats/factor.html
# policies entered in the same order as listed in Qualtrics
policydata <- as.data.frame(cbind(raw$policy_8,
                    raw$policy_9,
                    raw$policy_10,
                    raw$policy_12,
                    raw$policy_13,
                    raw$policy_14,
                    raw$policy_15,
                    raw$policy_16,
                    raw$policy2_9,
                    raw$policy2_10,
                    raw$policy2_11,
                    raw$policy2_12,
                    raw$policy2_13
                    ))
ev <- eigen(cor(policydata)) # get eigenvalues
ap <- parallel(subject=nrow(policydata),var=ncol(policydata),
  rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS) # looks like the answer is 2 factors

# Run Exploratory Maximum Likelihood Factor Analysis
# with varimax rotation
fit <- factanal(policydata, 2, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
# plot factor 1 by factor 2
# load <- fit$loadings[,1:2]
# plot(load,type="n") # set up plot
# text(load,labels=names(policydata)) # add variable names

```

# Factor Analysis of Prosocial items

```{r}
# Determine Number of Factors to Extract: https://www.statmethods.net/advstats/factor.html
# policies entered in the same order as listed in Qualtrics
prosocialdata <- as.data.frame(cbind(#raw$prosocial_motivation_1, # Mary wants to analyze this first item separately from the others
                    raw$prosocial_motivation_2,
                    raw$prosocial_motivation_3,
                    raw$prosocial_motivation_4,
                    raw$prosocial_motivation_5,
                    raw$prosocial_motivation_6,
                    raw$prosocial_motivation_7,
                    raw$prosocial_motivation_8
                    ))
prosocialdata <- prosocialdata[-c(1:10),] #removing the first 10 subjects because we didn't ask them item 7
ev <- eigen(cor(prosocialdata)) # get eigenvalues
ap <- parallel(subject=nrow(prosocialdata),var=ncol(prosocialdata),
  rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS) # two factors

# Run Exploratory Maximum Likelihood Factor Analysis
# with varimax rotation
fit <- factanal(prosocialdata, 2, rotation="varimax")
print(fit, digits=2, cutoff=.3, sort=TRUE)
```

# Index Computations
There are a couple of new variables to check when we get the final pilot data (self construal, policy support).
Also, we need to make sure the assumption that all data are initially strings hasn't changed. If it has, make sure it's not affecting any of the re-coding that is below.
Pending: Need to ensure a separate long-form dataset that includes average ratings for each message.
1) Check that the COVID19 statistics from NYT are up to date.
  If not, initiate a pull request from https://github.com/nytimes/covid-19-data/blob/master/us-states.csv
2) Get COVID-19 infection and death rates from participant's state from https://github.com/nytimes/covid-19-data/blob/master/us-states.csv
3) Health vulnerabilities (Self) - Average the responses to each of the following items (max = 1, min = 0)
  Over 60 years old?
  Do you suffer from any pre-existing medical condition?
  Do you smoke?
  Is your immune system weakened due to treatment or illness?
4) Health vulnerabilities (Others) - Average the responses to each of the following items (max = 1, min = 0)
  Live with elderly
  Live with smokers
  Live with weakened immune system due to treatment or illness
  Live with people with chronic medical conditions
5) Employment 
  Hours: Full time = .5, part time = -.5
  Site: On site = .5, partially remote = 0, fully remote = -.5
  Tenure: Employed = .5, unemployed = -.5
6) Health insurance - Responses to these items will be scored as follows:
  No insurance for anyone = 0
  Insurance for self or household, but not both = .5
  Insurance for all = 1
7) Economic stress, loneliness, and perceived stress
  Compute scores for these items
8) IRI - Compute averages for the following:
  Empathic Concern
  Personal Distress
  Fantasy
  Perspective Taking
  Overall Score
9) Trait Victimhood
  Compute average for all four items
10) Political Bias in News Sources: Each source will be coded based on the difference in accuracy bias between Democratic and Republican respondents rating from pages 19-20 of the following report from the Knight Foundation (Gallup):https://knightfoundation.org/wp-content/uploads/2020/03/KnightFoundation_AccuracyandBias_Report_FINAL.pdf. Positive scores would indicate greater perceived liberal bias. So for example, Fox News bias would be computed as: -71 - 65 = -136. The participant’s average news bias score will be computed based on these ratings.
11) Beliefs
  Average agreement within each of the three belief components (protecting self, protecting others, perceived vulnerability)
12) Prosocial Intentions
  Factor analyze responses to items 2-8.
  Average items loading on the same factor prior to analysis
13) Public policies
  Factor analyze responses to all items
  Average items loading on the same factor prior to analysis
14) Outgroup empathy, dehumanization, and prejudice
  Compute averages for the targeted vulnerable groups and for the non-vulnerable groups
15) Self construal
  Average 4 items (but double-check with Rui)
16) Household indices
  Compute difference scores for household size and care responsibilities
17) Compute objective SES
18) Compute subjective SES
19) Gender, race, and age
20) Party identification and voting behavior
  Dichotomize party identification: Republican = .5, Democrat = -.5
  Trump voter = .5, Anyone else = -.5
21) Purpose and usefulness
22) Generating target-specific DVs
23) Contrast coding for narrative versus expository messages

```{r}
wdf <- raw
#1) Check that the COVID19 statistics from NYT are up to date.
covid_data <- read.csv("~/Box Sync/CurrentProjects_Penn/COVID-19/Analysis/Public_data/covid-19-data/us-states.csv")
covid_data$date <- as.Date(covid_data$date)
covid_data <- covid_data[covid_data$date==max(covid_data$date),]
covid_data$deathrate <- covid_data$deaths/covid_data$cases
head(covid_data)
#2) Get COVID-19 infection and death rates from participant's state from https://github.com/nytimes/covid-19-data/blob/master/us-states.csv
wdf <- merge(wdf, covid_data, by.x = "state", by.y = "state", all.x = TRUE)
#3) Health vulnerabilities (Self) 
wdf <- within(wdf, {
  elder <- ifelse(age>60,1,
                  ifelse(age<=60,0,NA))
  health_self_1 <- as.numeric(health_self_1)
  health_self_2 <- as.numeric(health_self_2)
  health_self_3 <- as.numeric(health_self_3)
  })
wdf$health_self <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="elder"),
  which(colnames(wdf)=="health_self_1"),
  which(colnames(wdf)=="health_self_2"),
  which(colnames(wdf)=="health_self_3"))],
  na.rm=TRUE))
#4) Health vulnerabilities (Others) 
wdf$health_household <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="health_household_1"),
  which(colnames(wdf)=="health_household_2"),
  which(colnames(wdf)=="health_household_3"),
  which(colnames(wdf)=="health_household_4"))],
  na.rm=TRUE))
#5) Employment
wdf$jobsec <- paste(wdf$employ_preCovid,wdf$currentemploy)
wdf <- within(wdf, {
  student <- ifelse(student == 5, .5, 
                    ifelse(student == 6, -.5, NA))
  jobchange <- ifelse(jobsec=="1 1" | jobsec=="2 2" | jobsec=="4 4" | jobsec=="5 5" | jobsec=="6 6" | jobsec=="7 7", -1,
                       ifelse(jobsec=="2 1" | jobsec=="2 4" | jobsec=="6 5" | jobsec=="4 1", -.5,
                              ifelse(jobsec=="2 6" | jobsec=="1 5", 0,
                                     ifelse(jobsec=="2 5" | jobsec=="4 5", .5,
                                            ifelse(jobsec=="1 7" | jobsec=="2 7" | jobsec=="4 7" | jobsec=="5 7" | jobsec=="6 7", 1, NA)))))
 jobnow <- ifelse(currentemploy==1, .5,
                       ifelse(currentemploy==2, .5,
                              ifelse(currentemploy==4, .5,
                                     ifelse(currentemploy==5, 0,
                                            ifelse(currentemploy==6, 0,
                                                   ifelse(currentemploy==7, -.5, NA))))))
 remote <- ifelse(currentemploy==1, .5,
                       ifelse(currentemploy==2, -.5,
                              ifelse(currentemploy==4, .5,
                                     ifelse(currentemploy==5, .5,
                                            ifelse(currentemploy==6, -.5, NA)))))
})
#6) Health insurance (mean centered)
wdf$insurance <- rowMeans(wdf[,c(
  which(colnames(wdf)=="stress_insurance"),
  which(colnames(wdf)=="stress_insurance_all"))],
  na.rm=TRUE) - .5
#7) Economic stress, loneliness, and perceived stress
wdf <- within(wdf, {
  econ_stress_diff <- scale(stress_current_1 - stress_prior_1)
  econ_stress_current <- scale(stress_current_1)
})
wdf$pss_march_3 <- wdf$pss_current_3 #Correcting a Qualtrics labeling error
wdf <- within(wdf, {
  lonely_3r <- ifelse(lonely_3==1,4,
                       ifelse(lonely_3==2,3,
                              ifelse(lonely_3==3,2,
                                     ifelse(lonely_3==4,1,NA))))
  lonely_6r <- ifelse(lonely_6==1,4,
                       ifelse(lonely_6==2,3,
                              ifelse(lonely_6==3,2,
                                     ifelse(lonely_6==4,1,NA))))
  pss_feb_2r <- ifelse(pss_feb_2==0,4,
                       ifelse(pss_feb_2==1,3,
                              ifelse(pss_feb_2==2,2,
                                     ifelse(pss_feb_2==3,1,
                                           ifelse(pss_feb_2==4,1,NA)))))
  pss_feb_3r <- ifelse(pss_feb_3==0,4,
                       ifelse(pss_feb_3==1,3,
                              ifelse(pss_feb_3==2,2,
                                     ifelse(pss_feb_3==3,1,
                                           ifelse(pss_feb_3==4,1,NA)))))
  pss_march_2r <- ifelse(pss_march_2==0,4,
                       ifelse(pss_march_2==1,3,
                              ifelse(pss_march_2==2,2,
                                     ifelse(pss_march_2==3,1,
                                           ifelse(pss_march_2==4,1,NA)))))
  pss_march_3r <- ifelse(pss_march_3==0,4,
                       ifelse(pss_march_3==1,3,
                              ifelse(pss_march_3==2,2,
                                     ifelse(pss_march_3==3,1,
                                           ifelse(pss_march_3==4,1,NA)))))
})
wdf$lonely <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="lonely_1"),
  which(colnames(wdf)=="lonely_2"),
  which(colnames(wdf)=="lonely_3r"),
  which(colnames(wdf)=="lonely_4"),
  which(colnames(wdf)=="lonely_5"),
  which(colnames(wdf)=="lonely_6r"),
  which(colnames(wdf)=="lonely_7"),
  which(colnames(wdf)=="lonely_8"))],
  na.rm=TRUE))
wdf$pss_feb <- rowMeans(wdf[,c(
  which(colnames(wdf)=="pss_feb_1"),
  which(colnames(wdf)=="pss_feb_2r"),
  which(colnames(wdf)=="pss_feb_3r"),
  which(colnames(wdf)=="pss_feb_4"))],
  na.rm=TRUE)
wdf$pss_march <- rowMeans(wdf[,c(
  which(colnames(wdf)=="pss_march_1"),
  which(colnames(wdf)=="pss_march_2r"),
  which(colnames(wdf)=="pss_march_3r"),
  which(colnames(wdf)=="pss_march_4"))],
  na.rm=TRUE)
wdf <- within(wdf, {
  pss_diff <- scale(pss_march - pss_feb)
  pss_current <- scale(pss_march)
})
#8) IRI
wdf <- within(wdf, {
  empathy_2r <- ifelse(empathy_2==1,5,
                       ifelse(empathy_2==2,4,
                              ifelse(empathy_2==3,3,
                                     ifelse(empathy_2==4,2,
                                            ifelse(empathy_2==5,1,NA)))))
  empathy_4r <- ifelse(empathy_4==1,5,
                       ifelse(empathy_4==2,4,
                              ifelse(empathy_4==3,3,
                                     ifelse(empathy_4==4,2,
                                            ifelse(empathy_4==5,1,NA)))))
  empathy_5r <- ifelse(empathy_5==1,5,
                       ifelse(empathy_5==2,4,
                              ifelse(empathy_5==3,3,
                                     ifelse(empathy_5==4,2,
                                            ifelse(empathy_5==5,1,NA)))))
  empathy_10r <- ifelse(empathy_10==1,5,
                       ifelse(empathy_10==2,4,
                              ifelse(empathy_10==3,3,
                                     ifelse(empathy_10==4,2,
                                            ifelse(empathy_10==5,1,NA)))))
  empathy_12r <- ifelse(empathy_12==1,5,
                       ifelse(empathy_12==2,4,
                              ifelse(empathy_12==3,3,
                                     ifelse(empathy_12==4,2,
                                            ifelse(empathy_12==5,1,NA)))))
  iri_empathy_18r <- ifelse(iri_empathy_18==1,5,
                       ifelse(iri_empathy_18==2,4,
                              ifelse(iri_empathy_18==3,3,
                                     ifelse(iri_empathy_18==4,2,
                                            ifelse(iri_empathy_18==5,1,NA)))))
  iri_empathy_20r <- ifelse(iri_empathy_20==1,5,
                       ifelse(iri_empathy_20==2,4,
                              ifelse(iri_empathy_20==3,3,
                                     ifelse(iri_empathy_20==4,2,
                                            ifelse(iri_empathy_20==5,1,NA)))))
  iri_empathy_23r <- ifelse(iri_empathy_23==1,5,
                       ifelse(iri_empathy_23==2,4,
                              ifelse(iri_empathy_23==3,3,
                                     ifelse(iri_empathy_23==4,2,
                                            ifelse(iri_empathy_23==5,1,NA)))))
  iri_empathy_24r <- ifelse(iri_empathy_24==1,5,
                       ifelse(iri_empathy_24==2,4,
                              ifelse(iri_empathy_24==3,3,
                                     ifelse(iri_empathy_24==4,2,
                                            ifelse(iri_empathy_24==5,1,NA)))))
})
wdf$iri_empathic <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="empathy_1"),
  which(colnames(wdf)=="empathy_2r"),
  which(colnames(wdf)=="empathy_3"),
  which(colnames(wdf)=="empathy_4r"),
  which(colnames(wdf)=="empathy_5r"),
  which(colnames(wdf)=="empathy_6"),
  which(colnames(wdf)=="empathy_7"))],
  na.rm=TRUE))
wdf$iri_distress <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="empathy_8"),
  which(colnames(wdf)=="empathy_9"),
  which(colnames(wdf)=="empathy_10r"),
  which(colnames(wdf)=="empathy_11"),
  which(colnames(wdf)=="empathy_12r"),
  which(colnames(wdf)=="empathy_13"),
  which(colnames(wdf)=="empathy_14"))],
  na.rm=TRUE))
wdf$iri_fantasy <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="iri_empathy_17"),
  which(colnames(wdf)=="iri_empathy_19"),
  which(colnames(wdf)=="iri_empathy_20r"),
  which(colnames(wdf)=="iri_empathy_23r"),
  which(colnames(wdf)=="iri_empathy_25"),
  which(colnames(wdf)=="iri_empathy_27"),
  which(colnames(wdf)=="iri_empathy_29"))],
  na.rm=TRUE))
wdf$iri_persptak <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="iri_empathy_18r"),
  which(colnames(wdf)=="iri_empathy_21"),
  which(colnames(wdf)=="iri_empathy_22"),
  which(colnames(wdf)=="iri_empathy_24r"),
  which(colnames(wdf)=="iri_empathy_26"),
  which(colnames(wdf)=="iri_empathy_28"),
  which(colnames(wdf)=="iri_empathy_30"))],
  na.rm=TRUE))
wdf$iri_avg <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="iri_empathic"),
  which(colnames(wdf)=="iri_distress"),
  which(colnames(wdf)=="iri_fantasy"),
  which(colnames(wdf)=="iri_persptak"))],
  na.rm=TRUE))
#9) Victimhood
wdf$victimhood <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="victimhood_1"),
  which(colnames(wdf)=="victimhood_2"),
  which(colnames(wdf)=="victimhood_3"),
  which(colnames(wdf)=="victimhood_4"))],
  na.rm=TRUE))
#10) Political bias in news sources
wdf <- within(wdf, {
  newsbias_1 <- ifelse(news_1==4,82,
                       ifelse(news_1==5,80,
                              ifelse(news_1==6,109,
                                     ifelse(news_1==7,103,
                                            ifelse(news_1==8,77,
                                                   ifelse(news_1==9,116,
                                                          ifelse(news_1==10,89,
                                                                 ifelse(news_1==11,100,
                                                                        ifelse(news_1==12,78,
                                                                               ifelse(news_1==13,38,
                                                                                      ifelse(news_1==14,105,
                                                                                             ifelse(news_1==15,48,
                                                                                                    ifelse(news_1==16,62,
                                                                                                           ifelse(news_1==17,35,
                                                                                                                  ifelse(news_1==18,20,
                                                                                                                         ifelse(news_1==19,-75,
                                                                                                                                ifelse(news_1==20,-132,NA)))))))))))))))))
  newsbias_2 <- ifelse(news_2==4,82,
                       ifelse(news_2==5,80,
                              ifelse(news_2==6,109,
                                     ifelse(news_2==7,103,
                                            ifelse(news_2==8,77,
                                                   ifelse(news_2==9,116,
                                                          ifelse(news_2==10,89,
                                                                 ifelse(news_2==11,100,
                                                                        ifelse(news_2==12,78,
                                                                               ifelse(news_2==13,38,
                                                                                      ifelse(news_2==14,105,
                                                                                             ifelse(news_2==15,48,
                                                                                                    ifelse(news_2==16,62,
                                                                                                           ifelse(news_2==17,35,
                                                                                                                  ifelse(news_2==18,20,
                                                                                                                         ifelse(news_2==19,-75,
                                                                                                                                ifelse(news_2==20,-132,NA)))))))))))))))))
  newsbias_3 <- ifelse(news_3==4,82,
                       ifelse(news_3==5,80,
                              ifelse(news_3==6,109,
                                     ifelse(news_3==7,103,
                                            ifelse(news_3==8,77,
                                                   ifelse(news_3==9,116,
                                                          ifelse(news_3==10,89,
                                                                 ifelse(news_3==11,100,
                                                                        ifelse(news_3==12,78,
                                                                               ifelse(news_3==13,38,
                                                                                      ifelse(news_3==14,105,
                                                                                             ifelse(news_3==15,48,
                                                                                                    ifelse(news_3==16,62,
                                                                                                           ifelse(news_3==17,35,
                                                                                                                  ifelse(news_3==18,20,
                                                                                                                         ifelse(news_3==19,-75,
                                                                                                                                ifelse(news_3==20,-132,NA)))))))))))))))))
})
wdf$newsbias <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="newsbias_1"),
  which(colnames(wdf)=="newsbias_2"),
  which(colnames(wdf)=="newsbias_3"))],
  na.rm=TRUE))
#11) Beliefs (check that values got properly recoded for belief_others in the new pilot data)
wdf$belief_others <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="belief_others_1"),
  which(colnames(wdf)=="belief_others_2"),
  which(colnames(wdf)=="belief_others_3"),
  which(colnames(wdf)=="belief_others_4"),
  which(colnames(wdf)=="belief_others_5"),
  which(colnames(wdf)=="belief_others_6"),
  which(colnames(wdf)=="belief_others_7"),
  which(colnames(wdf)=="belief_others_8"))],
  na.rm=TRUE))
wdf$belief_self <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="belief_self_1"),
  which(colnames(wdf)=="belief_self_2"),
  which(colnames(wdf)=="belief_self_3"),
  which(colnames(wdf)=="belief_self_4"),
  which(colnames(wdf)=="belief_self_5"))],
  na.rm=TRUE))
wdf$belief_vulnerable <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="belief_vulnerable_1"),
  which(colnames(wdf)=="belief_vulnerable_2"),
  which(colnames(wdf)=="belief_vulnerable_3"),
  which(colnames(wdf)=="belief_vulnerable_4"),
  which(colnames(wdf)=="belief_vulnerable_5"),
  which(colnames(wdf)=="belief_vulnerable_6"))],
  na.rm=TRUE))
wdf$belief_nonvulnerable <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="belief_vulnerable_7"),
  which(colnames(wdf)=="belief_vulnerable_8"),
  which(colnames(wdf)=="belief_vulnerable_9"),
  which(colnames(wdf)=="belief_vulnerable_10"),
  which(colnames(wdf)=="belief_vulnerable_11"),
  which(colnames(wdf)=="belief_vulnerable_12"))],
  na.rm=TRUE))
#12) Prosocial Intentions
wdf$prosocial_charity <- scale(rowMeans(wdf[,c(
   which(colnames(wdf)=="prosocial_motivation_4"),
   which(colnames(wdf)=="prosocial_motivation_6"),
   which(colnames(wdf)=="prosocial_motivation_7")
   )],
   na.rm=TRUE))
wdf$prosocial_ffecon <- scale(rowMeans(wdf[,c(
   which(colnames(wdf)=="prosocial_motivation_2"),
   which(colnames(wdf)=="prosocial_motivation_3"),
   which(colnames(wdf)=="prosocial_motivation_5"),
   which(colnames(wdf)=="prosocial_motivation_8")
   )],
   na.rm=TRUE))
wdf$prosocial_motivation_1 <- scale(wdf$prosocial_motivation_1)
#13) Public policy support: Groupings come from factor analysis of pilot data
wdf$policy_vulnerable <- scale(rowMeans(wdf[,c(
   which(colnames(wdf)=="policy_1"),
   which(colnames(wdf)=="policy_2"),
   which(colnames(wdf)=="policy_3"),
   which(colnames(wdf)=="policy_4"),
   which(colnames(wdf)=="policy_5"),
   which(colnames(wdf)=="policy_6"),
   which(colnames(wdf)=="policy_7"),
   which(colnames(wdf)=="policy1_33"),
   which(colnames(wdf)=="policy1_34"))],
   na.rm=TRUE))
wdf$policy_proactive <- scale(rowMeans(wdf[,c(
   which(colnames(wdf)=="policy_8"),
   which(colnames(wdf)=="policy_12"),
   which(colnames(wdf)=="policy_14"),
   which(colnames(wdf)=="policy_15"),
   which(colnames(wdf)=="policy_16"),
   which(colnames(wdf)=="policy2_9"),
   which(colnames(wdf)=="policy2_10"))],
   na.rm=TRUE))
 wdf$policy_reactive <- scale(rowMeans(wdf[,c(
   which(colnames(wdf)=="policy_9"),
   which(colnames(wdf)=="policy_10"),
   which(colnames(wdf)=="policy_13"),
   which(colnames(wdf)=="policy2_12"),
   which(colnames(wdf)=="policy2_13")
   )],
   na.rm=TRUE))
#14) Outgroup Empathy, Dehumanization, Prejudice
wdf$empathy_vulnerable <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="empathy_group_1"),
  which(colnames(wdf)=="empathy_group_2"),
  which(colnames(wdf)=="empathy_group_3"),
  which(colnames(wdf)=="empathy_group_4"),
  which(colnames(wdf)=="empathy_group_5"),
  which(colnames(wdf)=="empathy_group_6"))],
  na.rm=TRUE))
wdf$empathy_nonvulnerable <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="empathy_group_8"),
  which(colnames(wdf)=="empathy_group_9"),
  which(colnames(wdf)=="empathy_group_10"),
  which(colnames(wdf)=="empathy_group_11"),
  which(colnames(wdf)=="empathy_group_12"),
  which(colnames(wdf)=="empathy_group_13"))],
  na.rm=TRUE))
wdf$humanization_vulnerable <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="humanization_1"),
  which(colnames(wdf)=="humanization_2"),
  which(colnames(wdf)=="humanization_3"),
  which(colnames(wdf)=="humanization_4"),
  which(colnames(wdf)=="humanization_5"),
  which(colnames(wdf)=="humanization_6"))],
  na.rm=TRUE))
wdf$humanization_nonvulnerable <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="humanization_8"),
  which(colnames(wdf)=="humanization_9"),
  which(colnames(wdf)=="humanization_10"),
  which(colnames(wdf)=="humanization_11"),
  which(colnames(wdf)=="humanization_12"),
  which(colnames(wdf)=="humanization_13"))],
  na.rm=TRUE))
wdf$prejudice_vulnerable <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="prejudice_1"),
  which(colnames(wdf)=="prejudice_2"),
  which(colnames(wdf)=="prejudice_3"),
  which(colnames(wdf)=="prejudice_4"),
  which(colnames(wdf)=="prejudice_5"),
  which(colnames(wdf)=="prejudice_6"))],
  na.rm=TRUE))
wdf$prejudice_nonvulnerable <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="prejudice_8"),
  which(colnames(wdf)=="prejudice_9"),
  which(colnames(wdf)=="prejudice_10"),
  which(colnames(wdf)=="prejudice_11"),
  which(colnames(wdf)=="prejudice_12"),
  which(colnames(wdf)=="prejudice_13"))],
  na.rm=TRUE))
#15) Self construal
wdf$selfconstrual <- scale(rowMeans(wdf[,c(
   which(colnames(wdf)=="selfconstrual_1"),
   which(colnames(wdf)=="selfconstrual_2"),
   which(colnames(wdf)=="selfconstrual_3"),
   which(colnames(wdf)=="selfconstrual_4"))],
   na.rm=TRUE))
#16) Household indices
wdf <- within(wdf, {
  house_diff <- scale(household_size_now - household_size_befor)
  care_diff <- scale(stress_care2 - stress_care1)
})
#17) Objective SES
wdf <- within(wdf, {
  ses_income_self[ses_income_self > 9] <- NA
  ses_income_household[ses_income_household > 9] <- NA
  ses_savings[ses_savings > 5] <- NA
  z.sav <- scale(ses_savings)
  ses_cash[ses_cash > 9] <- NA
  z.cash <- scale(ses_cash)
  savings_debt[savings_debt > 9] <- NA
  z.net <- scale(savings_debt)
  z.edu <- scale(ses_degree)
})
wdf$z.inc <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="ses_income_self"),
  which(colnames(wdf)=="ses_income_household"))],
  na.rm=TRUE))
wdf$z.assets <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="z.sav"),
  which(colnames(wdf)=="z.cash"),
  which(colnames(wdf)=="z.net"))],
  na.rm=TRUE))
wdf$ses_obj <- scale(rowMeans(wdf[,c(
  which(colnames(wdf)=="z.inc"),
  which(colnames(wdf)=="z.edu"),
  which(colnames(wdf)=="z.assets"))],
  na.rm=TRUE))

#18) Subjective status
wdf <- within(wdf, {
  ses_subj <- ifelse(ses_subj_1 == "On", 1,
                      ifelse(ses_subj_2 == "On", 2,
                             ifelse(ses_subj_3 == "On", 3,
                                    ifelse(ses_subj_4 == "On", 4, 
                                           ifelse(ses_subj_5 == "On", 5,
                                                  ifelse(ses_subj_6 == "On", 6, 
                                                         ifelse(ses_subj_7 == "On", 7,
                                                                ifelse(ses_subj_8 == "On", 8, 
                                                                       ifelse(ses_subj_9 == "On", 9,
                                                                              ifelse(ses_subj_10 == "On", 10, NA))))))))))
})
wdf$ses_subj <- scale(wdf$ses_subj)
#19) Gender, Race, and Age
wdf <- within(wdf, {
  gender.binom <- ifelse(gender == 1, -.5,
                   ifelse(gender == 2, .5, NA))
})
for (i in 1:length(wdf$MID)) {
  race = wdf$race[i]
  hl = wdf$hispanic_latino[i]
  wdf$race_ethnicity[i] <- ifelse(race==1 & hl == 0, -.5,
                                  ifelse(race>1 | hl == 1, .5, NA))
}
wdf$age = scale(as.numeric(wdf$age))
#20) Party identification and voting behavior
for (i in 1:length(wdf$MID)) {
  affiliation = wdf$`politic affiliation`[i]
  lean = wdf$lean[i]
  wdf$party[i] <- ifelse(affiliation<0, -.5,
                      ifelse(affiliation>0, .5,
                             ifelse(lean==-1,-.5,
                                    ifelse(lean==1,.5,NA))))
}
wdf <- within(wdf, {
  trump2016 <- ifelse(politics_pres_2016 == "1", -.5, #Hillary Clinton
                      ifelse(politics_pres_2016 == "2", .5, #Donald Trump
                             ifelse(politics_pres_2016 == "3", -.5, NA))) #Other
  trump2020 <- ifelse(politics_pres_2020 == "1", -.5, #Joe Biden
                      ifelse(politics_pres_2020 == "2", .5, #Donald Trump
                             ifelse(politics_pres_2020 == "3", -.5, NA))) #Other
})
#21) Purpose & usefulness - not in pilot dataset
# wdf$purpose <- scale(rowMeans(wdf[,c(
#    which(colnames(wdf)=="purpose_1"),
#    which(colnames(wdf)=="purpose_2"),
#    which(colnames(wdf)=="purpose_3"),
#    which(colnames(wdf)=="purpose_4"),
#    which(colnames(wdf)=="purpose_5"),
#    which(colnames(wdf)=="purpose_6"),
#    which(colnames(wdf)=="purpose_7"),
#    which(colnames(wdf)=="purpose_8"),
#    which(colnames(wdf)=="purpose_9"))],
#    na.rm=TRUE))
# wdf$purpose <- scale(rowMeans(wdf[,c(
#    which(colnames(wdf)=="usefulness_1"),
#    which(colnames(wdf)=="usefulness_2"),
#    which(colnames(wdf)=="usefulness_3"))],
#    na.rm=TRUE))
#22) DVs specific to target group
wdf <- within(wdf, {
  targ_empathy <- ifelse(TARGETED_GROUP == "healthcare workers", empathy_group_6,
                         ifelse(TARGETED_GROUP == "elderly people", empathy_group_5,
                                ifelse(TARGETED_GROUP == "immunocompromised people", empathy_group_2,
                                       ifelse(TARGETED_GROUP == "undocumented immigrants", empathy_group_4,
                                              ifelse(TARGETED_GROUP == "prisoners", empathy_group_3,
                                                     ifelse(TARGETED_GROUP == "people who are financially struggling", empathy_group_1, NA))))))
  targ_prejudice <- ifelse(TARGETED_GROUP == "healthcare workers", prejudice_6,
                         ifelse(TARGETED_GROUP == "elderly people", prejudice_5,
                                ifelse(TARGETED_GROUP == "immunocompromised people", prejudice_2,
                                       ifelse(TARGETED_GROUP == "undocumented immigrants", prejudice_4,
                                              ifelse(TARGETED_GROUP == "prisoners", prejudice_3,
                                                     ifelse(TARGETED_GROUP == "people who are financially struggling", prejudice_1, NA))))))
  targ_humanization <- ifelse(TARGETED_GROUP == "healthcare workers", humanization_6,
                         ifelse(TARGETED_GROUP == "elderly people", humanization_5,
                                ifelse(TARGETED_GROUP == "immunocompromised people", humanization_2,
                                       ifelse(TARGETED_GROUP == "undocumented immigrants", humanization_4,
                                              ifelse(TARGETED_GROUP == "prisoners", humanization_3,
                                                     ifelse(TARGETED_GROUP == "people who are financially struggling", humanization_1, NA))))))
  targ_vulnerable_belief <- ifelse(TARGETED_GROUP == "healthcare workers", belief_vulnerable_6,
                         ifelse(TARGETED_GROUP == "elderly people", belief_vulnerable_1,
                                ifelse(TARGETED_GROUP == "immunocompromised people", belief_vulnerable_2,
                                       ifelse(TARGETED_GROUP == "undocumented immigrants", belief_vulnerable_4,
                                              ifelse(TARGETED_GROUP == "prisoners", belief_vulnerable_3,
                                                     ifelse(TARGETED_GROUP == "people who are financially struggling", belief_vulnerable_5, NA))))))
})

#23) Contrast coding narrative (+.5) versus expository (-.5) conditions
wdf <- within(wdf, {
  message <- ifelse(!is.na(nh_empathy_12_5) |  
                      !is.na(ne_empathy_12_5) | 
                      !is.na(ni_empathy_12_5) | 
                      !is.na(nu_empathy_12_5) | 
                      !is.na(np_empathy_12_5) | 
                      !is.na(nj_empathy_12_5), .5,
                    ifelse(!is.na(eh_empathy_12_5) |  
                             !is.na(ee_empathy_12_5) | 
                             !is.na(ei_empathy_12_5) | 
                             !is.na(eu_empathy_12_5) | 
                             !is.na(ep_empathy_12_5) | 
                             !is.na(ej_empathy_12_5), -.5, NA))
})
```

# outlier detection and winsorization
Outliers that are more than 3 SDs from the mean will be winsorized to +/- 3 SD

```{r}
# List of variables to winsorize
#   Make sure to add usefulness and purpose for the main study
#   Make sure to add average post-message ratings of sharing, relevance, and motivation when those are ready
variables <- c("deathrate",
"health_self",
"health_household",
"jobchange",
"econ_stress_diff",
"econ_stress_current",
"lonely",
"pss_diff",
"pss_current",
"iri_empathic",
"iri_distress",
"iri_fantasy",
"iri_persptak",
"iri_avg",
"victimhood",
"newsbias",
"belief_others",
"belief_self",
"belief_vulnerable",
"belief_nonvulnerable",
"intentions",
"policy_vulnerable",
"policy_proactive",
"policy_reactive",
"empathy_vulnerable",
"empathy_nonvulnerable",
"humanization_vulnerable",
"humanization_nonvulnerable",
"prejudice_vulnerable",
"prejudice_nonvulnerable",
"selfconstrual",
"house_diff",
"care_diff",
"ses_obj",
"ses_subj",
"age",
"as_empathy",
"cog_empathy",
"aff_empathy",
"state_empathy",
"as_empathy",
"cog_empathy",
"aff_empathy",
"state_empathy",
"stress_children",
"conservatism",
"politics_news_freq",
"stress_news",
"share_sm",
"share_uncon",
"share_con",
"rel_self",
"rel_social",
"motiv_self",
"motiv_other",
"targ_empathy",
"targ_prejudice",
"targ_humanization",
"targ_vulnerable_belief",
"prosocial_charity",
"prosocial_ffecon",
"prosocial_motivation_1")

# Scale any unscaled variables
# Note: If you want the raw mean and sd after scaling, use: attributes(df$variable)$`scaled:center` and attributes(df$variable)$`scaled:scale`
wdf <- within(wdf, {
  as_empathy <- scale(as_empathy)
  cog_empathy <- scale(cog_empathy)
  aff_empathy <- scale(aff_empathy)
  state_empathy <- scale(state_empathy)
  stress_children <- scale(stress_children)
  conservatism <- scale(conservatism)
  politics_news_freq <- scale(politics_news_freq)
  stress_news <- scale(stress_news)
  share_sm <- scale(share_sm)
  share_uncon <- scale(share_uncon)
  share_con <- scale(share_con)
  rel_self <- scale(rel_self)
  rel_social <- scale(rel_social)
  motiv_self <- scale(motiv_self)
  motiv_other <- scale(motiv_other)
  targ_empathy <- scale(targ_empathy)
  targ_prejudice <- scale(targ_prejudice)
  targ_humanization <- scale(targ_humanization)
  targ_vulnerable_belief <- scale(targ_vulnerable_belief)
})

# For each variable, winsorize at +/-3 SD
for (v in 1:length(variables)) {
  col = which(colnames(wdf)==variables[v])
  wdf[,col][wdf[,col] < -3] <- -3
  wdf[,col][wdf[,col] > 3] <- 3
}
```

# converting to long

```{r}
## recreating composites for long 

# aff empathy 

affective = c("^(.)(.)_empathy_([1-4])_1", "^(.)(.)_empathy_([1-4])_2", "^(.)(.)_empathy_([1-4])_3", "^(.)(.)_empathy_([1-4])_4", "^(.)(.)_empathy_([1-4])_5") 

affective1 <- grep(affective[1], names(wdf))
affective2 <- grep(affective[2], names(wdf))
affective3 <- grep(affective[3], names(wdf))
affective4 <- grep(affective[4], names(wdf))
affective5 <- grep(affective[5], names(wdf))

wdf <-wdf %>% mutate(empathyaff_1_1 = rowMeans(wdf[affective1], na.rm = T))
wdf <-wdf %>% mutate(empathyaff_1_2 = rowMeans(wdf[affective2], na.rm = T))
wdf <-wdf %>% mutate(empathyaff_1_3 = rowMeans(wdf[affective3], na.rm = T))
wdf <-wdf %>% mutate(empathyaff_1_4 = rowMeans(wdf[affective4], na.rm = T))
wdf <-wdf %>% mutate(empathyaff_1_5 = rowMeans(wdf[affective5], na.rm = T))

# cog_empathy

cog = c("^(.)(.)_empathy_([5-8])_1", "^(.)(.)_empathy_([5-8])_2", "^(.)(.)_empathy_([5-8])_3", "^(.)(.)_empathy_([5-8])_4", "^(.)(.)_empathy_([5-8])_5") 

cog1 <- grep(cog[1], names(wdf))
cog2 <- grep(cog[2], names(wdf))
cog3 <- grep(cog[3], names(wdf))
cog4 <- grep(cog[4], names(wdf))
cog5 <- grep(cog[5], names(wdf))

wdf <-wdf %>% mutate(empathycog_1_1 = rowMeans(wdf[cog1], na.rm = T))
wdf <-wdf %>% mutate(empathycog_1_2 = rowMeans(wdf[cog2], na.rm = T))
wdf <-wdf %>% mutate(empathycog_1_3 = rowMeans(wdf[cog3], na.rm = T))
wdf <-wdf %>% mutate(empathycog_1_4 = rowMeans(wdf[cog4], na.rm = T))
wdf <-wdf %>% mutate(empathycog_1_5 = rowMeans(wdf[cog5], na.rm = T))

# as_empathy

as = c("^(.)(.)_empathy_([9]|1[0-2])_1", "^(.)(.)_empathy_([9]|1[0-2])_2", "^(.)(.)_empathy_([9]|1[0-2])_3", "^(.)(.)_empathy_([9]|1[0-2])_4", "^(.)(.)_empathy_([9]|1[0-2])_5")

as1 <- grep(as[1], names(wdf))
as2 <- grep(as[2], names(wdf))
as3 <- grep(as[3], names(wdf))
as4 <- grep(as[4], names(wdf))
as5 <- grep(as[5], names(wdf))

wdf <-wdf %>% mutate(empathyas_1_1 = rowMeans(wdf[as1], na.rm = T))
wdf <-wdf %>% mutate(empathyas_1_2 = rowMeans(wdf[as2], na.rm = T))
wdf <-wdf %>% mutate(empathyas_1_3 = rowMeans(wdf[as3], na.rm = T))
wdf <-wdf %>% mutate(empathyas_1_4 = rowMeans(wdf[as4], na.rm = T))
wdf <-wdf %>% mutate(empathyas_1_5 = rowMeans(wdf[as5], na.rm = T))

# state empathy

state = c("^(.)(.)_empathy_([0-9]|1[0-2])_1", "^(.)(.)_empathy_([0-9]|1[0-2])_2", "^(.)(.)_empathy_([0-9]|1[0-2])_3", "^(.)(.)_empathy_([0-9]|1[0-2])_4", "^(.)(.)_empathy_([0-9]|1[0-2])_5") 

state1 <- grep(state[1], names(wdf))
state2 <- grep(state[2], names(wdf))
state3 <- grep(state[3], names(wdf))
state4 <- grep(state[4], names(wdf))
state5 <- grep(state[5], names(wdf))

wdf <-wdf %>% mutate(empathyavg_1_1 = rowMeans(wdf[state1], na.rm = T))
wdf <-wdf %>% mutate(empathyavg_1_2 = rowMeans(wdf[state2], na.rm = T))
wdf <-wdf %>% mutate(empathyavg_1_3 = rowMeans(wdf[state3], na.rm = T))
wdf <-wdf %>% mutate(empathyavg_1_4 = rowMeans(wdf[state4], na.rm = T))
wdf <-wdf %>% mutate(empathyavg_1_5 = rowMeans(wdf[state5], na.rm = T))


##renaming cols from c_msgs

names(wdf)[which(colnames(wdf)=="c_msg_rel_self_1")] <- "relself_0_1"
names(wdf)[which(colnames(wdf)=="c_msg_rel_social_1")] <- "relsocial_0_1"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_self_1")] <- "motivself_0_1"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_other_1")] <- "motivother_0_1"


names(wdf)[which(colnames(wdf)=="c_msg_rel_self_2")] <- "relself_0_2"
names(wdf)[which(colnames(wdf)=="c_msg_rel_social_2")] <- "relsocial_0_2"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_self_2")] <- "motivself_0_2"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_other_2")] <- "motivother_0_2"

names(wdf)[which(colnames(wdf)=="c_msg_rel_self_3")] <- "relself_0_3"
names(wdf)[which(colnames(wdf)=="c_msg_rel_social_3")] <- "relsocial_0_3"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_self_3")] <- "motivself_0_3"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_other_3")] <- "motivother_0_3"

names(wdf)[which(colnames(wdf)=="c_msg_rel_self_4")] <- "relself_0_4"
names(wdf)[which(colnames(wdf)=="c_msg_rel_social_4")] <- "relsocial_0_4"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_self_4")] <- "motivself_0_4"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_other_4")] <- "motivother_0_4"

names(wdf)[which(colnames(wdf)=="c_msg_rel_self_5")] <- "relself_0_5"
names(wdf)[which(colnames(wdf)=="c_msg_rel_social_5")] <- "relsocial_0_5"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_self_5")] <- "motivself_0_5"
names(wdf)[which(colnames(wdf)=="c_msg_motiv_other_5")] <- "motivother_0_5"



names(wdf)[which(colnames(wdf)=="5_c_msg_rel_self_11")] <- "relself_11_5"
names(wdf)[which(colnames(wdf)=="5_c_msg_rel_social_11")] <- "relsocial_11_5"
names(wdf)[which(colnames(wdf)=="5_c_msg_motiv_self_11")] <- "motivself_11_5"
names(wdf)[which(colnames(wdf)=="5_c_msg_motiv_other_11")] <- "motivother_11_5"

names(wdf) <- gsub("^c_msg_rel_self_1", "relself_1", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_1", "relsocial_1", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_1", "motivself_1", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_1", "motivother_1", names(wdf))

names(wdf) <- gsub("^c_msg_rel_self_2", "relself_2", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_2", "relsocial_2", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_2", "motivself_2", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_2", "motivother_2", names(wdf))

names(wdf) <- gsub("^c_msg_rel_self_3", "relself_3", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_3", "relsocial_3", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_3", "motivself_3", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_3", "motivother_3", names(wdf))

names(wdf) <- gsub("^c_msg_rel_self_4", "relself_4", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_4", "relsocial_4", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_4", "motivself_4", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_4", "motivother_4", names(wdf))

names(wdf) <- gsub("^c_msg_rel_self_5", "relself_5", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_5", "relsocial_5", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_5", "motivself_5", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_5", "motivother_5", names(wdf))

names(wdf) <- gsub("^c_msg_rel_self_6", "relself_6", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_6", "relsocial_6", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_6", "motivself_6", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_6", "motivother_6", names(wdf))


names(wdf) <- gsub("^c_msg_rel_self_7", "relself_7", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_7", "relsocial_7", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_7", "motivself_7", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_7", "motivother_7", names(wdf))


names(wdf) <- gsub("^c_msg_rel_self_8", "relself_8", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_8", "relsocial_8", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_8", "motivself_8", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_8", "motivother_8", names(wdf))


names(wdf) <- gsub("^c_msg_rel_self_9", "relself_9", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_9", "relsocial_9", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_9", "motivself_9", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_9", "motivother_9", names(wdf))

names(wdf) <- gsub("^c_msg_rel_self_10", "relself_10", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_10", "relsocial_10", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_10", "motivself_10", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_10", "motivother_10", names(wdf))

names(wdf) <- gsub("^c_msg_rel_self_11", "relself_11", names(wdf))
names(wdf) <- gsub("^c_msg_rel_social_11", "relsocial_11", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_self_11", "motivself_11", names(wdf))
names(wdf) <- gsub("^c_msg_motiv_other_11", "motivother_11", names(wdf))

## long with share DVs item by item

long1 <- tidyr::pivot_longer(wdf, 
                    cols = 'nh_share_1_1':'ej_empathy_12_5', 
                    names_to = c("cond", "group", "var", "item", "msg"), 
                    names_pattern =  "(.)(.)_(.*)_(.*)_(.)", values_to = "rating", values_drop_na = TRUE)
long1 <- long1[-which(long1$var=="empathy"|is.na(long1$var)),] #dropping individual empathy items and NAs

wider1 <- long1 %>% filter(item == 1) %>% select (var, msg, ID, rating) %>% pivot_wider(data = ., names_from = var, values_from = rating)
wider1 <- wider1 %>% rename(share1 = share)
wider2 <- long1 %>% filter(item == 2) %>% select (var, msg, ID, rating) %>% pivot_wider(data = ., names_from = var, values_from = rating)
wider2 <- wider2 %>% rename(share2 = share)
wider3 <- long1 %>% filter(item == 3) %>% select (var, msg, ID, rating) %>% pivot_wider(data = ., names_from = var, values_from = rating)
wider3 <- wider3 %>% rename(share3 = share)


## long with composite empathy & rel/motiv self/other
vars <- colnames(wdf[grep("relself|relsocial|motivself|motivother|empathyaff|empathycog|empathyas|empathyavg", names(wdf))])
long2 <- tidyr::pivot_longer(wdf, 
                    cols = vars, 
                    names_to = c("var", "item", "msg"), 
                    names_pattern =  "(.*)_([0-9]|1[0-2])_([0-9])", values_to = "rating", values_drop_na = TRUE)

long2 <- long2 %>% dplyr::select(- item)

## wide with message number indicator 
wider <- pivot_wider(data = long2,names_from = var, values_from = rating)

wider <- left_join(wider, wider1, by = c("ID", "msg"))
wider <- left_join(wider, wider2, by = c("ID", "msg"))
wider <- left_join(wider, wider3, by = c("ID", "msg"))

View(wider[c("ID", "msg", "share1", "share2", "share3")])
```

## Saving dataframes for analysis
``` {r}
write.csv(wdf,"~/Box Sync/CurrentProjects_Penn/COVID-19/Analysis/Narratives/Narratives_Pilot1/pilot_wide.csv", row.names = FALSE)
#write.csv(long1,"~/Box Sync/CurrentProjects_Penn/COVID-19/Analysis/Narratives/Narratives_Pilot1/pilot_shares.csv", row.names = FALSE)
#write.csv(long2,"~/Box Sync/CurrentProjects_Penn/COVID-19/Analysis/Narratives/Narratives_Pilot1/pilot_empathy_relmot.csv", row.names = FALSE)
write.csv(wider,"~/Box Sync/CurrentProjects_Penn/COVID-19/Analysis/Narratives/Narratives_Pilot1/pilot_long.csv", row.names = FALSE)
```

