---
title: "R Notebook"
output: html_notebook
editor_options: 
  chunk_output_type: inline
---

```{r}
library(plyr)
library(dplyr)
library(ggplot2)
library(paramtest)
```


# Step 1: Data Collection
set sample size
```{r}

n <- 100
```

create predictor 1

```{r}
x1 <- rnorm(n, mean = 0, sd = 1)
```

create predictor 2

```{r}
x2 <- sample(c(0,1), n, replace = T)
```

creating coefficients and then Y based on coefficients, along with error term. 

```{r}
b0 <- 0
b1 <- .3
b2 <- .2
b3 <- .3
y <- b0 + (b1*x1) + (b2*x2) + (b3*x1*x2) + rnorm(n, mean = 0, sd = 1)

```

# Step 2: Run the regression


```{r}
model <- lm(y~ x1*x2)
str(summary(model))

```

# Store the results (in this case, p vals, coefficients, & R^2 of overall model)

```{r}
output <- summary(model)$coefficients
coefs <- output[,1]
ps <- output[,4]

rsq <- summary(model)$r.squared

results <- c(coefs, ps, rsq)
names(results) <- c('b0_coef', 'b1_coef', 'b2_coef', 'b3_coef', 'b0_p', 'b1_p', 'b2_p', 'b3_p', 'rsq')



```

# combining above & placing into a function

```{r}

regression_sim <- function(simNum, n, b0, b1, b2, b3, x1_mean = 0, x1_sd = 1, err_mean = 0, err_sd = 1) {
  
  x1 <- rnorm(n, mean = x1_mean, sd = x1_sd)
  x2 <- sample(0:1, n, replace = T)
  
  y <- b0 + (b1*x1) + (b2*x2) + (b3*x1*x2) + rnorm(n, mean = 0, sd = 1)
model <- lm(y~ x1*x2)

  
  output <- summary(model)$coefficients
coefs <- output[,1]
ps <- output[,4]

rsq <- summary(model)$r.squared

results <- c(coefs, ps, rsq)
names(results) <- c('b0_coef', 'b1_coef', 'b2_coef', 'b3_coef', 'b0_p', 'b1_p', 'b2_p', 'b3_p', 'rsq')

  return(results)
  
}

regression_sim(1, n = 100, b0 = 0, b1 =.3 , b2 = .2, b3 = .3)

```


# Now repeating the study over and over again using ldply() function
first argument is a sequence that you want to loop over (in this case, the number of times to loop)
second argument is what you want the sequence to loopt through (in this case our function). so for each element in the sequence, it will run the function
last args are the parameters you need to set for the function

```{r}
num_sims <- 10
sims <- ldply(1:num_sims, regression_sim, n = 100, b0 = 0, b1 = .3, b2= .2, b3= .3)
```

then calculatin gthe propro of p values that are significant for interaction

```{r}
power <- sum(sims$b3_p <.05)/nrow(sims)
```


# varying parameters
key parameter to adjust is sample size, along with other effect sizes. 

starting with a range of sample sizes

```{r}
sample_sizes <- c(50, 100, 200, 300, 500)
results <- NULL

for(val in sample_sizes) {
  
  sims <- ldply(1:1000, regression_sim, n = val, b0 = 0, b1 = .3, b2 = .2, b3 = .3)
  sims$n <- val ## add sample size as separate column to the results
  results <- rbind(results, sims)
}

```


# plotting power as a function of sample size


```{r}
power_ests <- results %>%
  group_by(n) %>%
  summarize(power = sum(b3_p < .05)/n())

ggplot(power_ests, aes(x = n, y = power)) + 
  geom_point() + geom_line() + ylim(c(0,1)) + theme_minimal()



```

to vary multiple parameters (like sample size & effect size simultaneously)


```{r}
grid <- expand.grid(n = c(50, 100, 200), b3 = c(.2, .5, .8))
results = NULL
for(row in 1:nrow(grid)){
  sims <- ldply(1:1000, regression_sim, n = grid[row, 'n'], b0 =0, 
                b1 = .3, b2 = .2, b3 = grid[row, 'b3'])
  sims$n <- grid[row, 'n']
  sims$b3 <- grid[row, 'b3']
  results <- rbind(results, sims)
  

}

power_ests2 <- results %>% 
  group_by(n, b3) %>% 
  summarize(power = sum(b3_p < .05)/ n())
power_ests2$b3 <- factor(power_ests2$b3)


ggplot(power_ests2, aes(x = n, y = power, group = b3, color = b3)) + 
  geom_point() +
  geom_line() + 
  ylim(c(0,1)) + 
  theme_minimal()




```

```{r}
paramtest_results <- grid_search(regression_sim,
    params=list(n=c(500, 1000, 2000), b3=c(.2, .3, .4)),
    n.iter=1000, output='data.frame', parallel='snow', ncpus=3,
    b0=0, b1=.2, b2=.2)

power <- results(paramtest_results) %>%
    dplyr::group_by(n.test, b3.test) %>%
    summarise(power = sum(b3_p < .05)/n())
print(power)
ggplot(power, aes(x=n.test, y=power, group=factor(b3.test), colour=factor(b3.test))) +
    geom_point() +
    geom_line() +
    ylim(c(0, 1)) +
    labs(x='Sample Size', y='Power', colour="Beta estimate for interaction") +
    theme_minimal()

```








